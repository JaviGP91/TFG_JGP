//    //Comprobamos si vienen mensajes de estado, empiezan con '%%'
    //    if ( Serial.read() == '%' ) {
    //      while ( ! Serial.available() )  delay(1);
    //      if ( Serial.read() == '%' ) {
    //        //Enciende el led al enviar mensaje
    //        digitalWrite(LED_STATUS, HIGH);
    //        //Extrac MAC and data from Serial : MAC/{status}
    //        String serialmsg = Serial.readString();
    //        String macaddr = Serial.readStringUntil('/');
    //        macaddr.remove(0, 2);
    //        String datastr = serialmsg.substring(serialmsg.indexOf("/") + 1, serialmsg.length()) + '\0';
    //
    //        //Save current MAC value in EEPROM if isn't repeated bro
    //        String str;
    //        if (EEPROM.get(eeAddress, str) != macaddr) {
    //          EEPROM.put(eeAddress, macaddr);  //Grabamos el valor
    //
    //          //And create a subtopic...
    //          String sub_topic = ("orchard/" + TYPE_NODE + "/ESP8266Client-" + macaddr);    // Select topic by ESP MAC
    //          const char* rcv_topic = sub_topic.c_str();
    //          //Register the topic in a LUT...
    //          subLUT[indexLUT].subtopic = rcv_topic;
    //          //And subscribe!
    //          if (client.connected()) client.subscribe(rcv_topic);
    //          Serial.printf("\r\Suscribed to:\t%s", subLUT[indexLUT].subtopic);
    //          Serial.println();
    //          indexLUT++;
    //          //Next write EEPROM position and check memory overflow
    //          eeAddress += sizeof(macaddr);
    //          if (eeAddress >= EEPROM.length()) eeAddress = 0;
    //        }
    //
    //        //Build mqtt topic from incoming message and public
    //        String mac_topic = ("orchard/" + TYPE_NODE + "/ESP8266Client-" + macaddr + "/status");    // Select topic by ESP MAC
    //        const char* send_topic = mac_topic.c_str();
    //        sprintf(mensaje_mqtt, "{\"mac\":\"%s\",\"mensaje\":%s}", macaddr.c_str(), datastr.c_str());
    //        client.publish(send_topic, mensaje_mqtt);
    //
    //        lastMessage = rightNow;
    //      }
    //    }